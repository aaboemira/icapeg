#"Reading from env variable if value is not in toml file feature"
#feature is supported for strings, int, bool, time.duration and string slices only
#(every type used in this project)

#to use this feature you have to do the next
#assume that there is an env variable called LOG_LEVEL and you want to assign LOG_LEVEL value to app.log_level
#You will change the value of (log_level= "debug") to (log_level= "$_LOG_LEVEL")

#If you want to add an array as an env variable in your machine, please add backslash before special characters
#like white spaces, double quotes and comas, example:
#export ARRAY= "[\"txt\", \"pdf\", \"dmg\", \"exe\", \"com\", \"rar\", \"unknown\"]"
#Don't forget to put the value between double quotes in case there are white spaces in the value.

#NOTE: before you use this feature please make sure that the env variable that you want to use is globally in
# your machine and not just exported in a local session

####### POLICY
# Please before adding policy JSON file add "\" before special characters and "\n" instead of new lines
#by this tool: https://onlinestringtools.com/escape-string#:~:text=String%20escaper%20tool%20What%20is,single%20quotes%2C%20and%20double%20quotes.
# You shouldn't remove the policy variable from config file
#if you don't want to set a value for policy you should do like that
#policy = ""

title = "ICAP configuration file"

[app]
log_level = "debug" # the log levels for tha app, available values: info-->logging the overall progress of the app, debug --> log everything including errors, error --> log infos and just errors
port = 1344
max_filesize = 10000000 #bytes
resp_scanner_vendor_shadow = "none"
req_scanner_vendor_shadow = "none"
bypass_extensions = []
process_extensions = ["*"] # * = everything except the ones in bypass, unknown = system couldn't find out the type of the file
preview_bytes = "" #byte
preview_enabled = false # options send preview header or not
propagate_error = true
service_caption ="Go-ICAP server - glasswall Rebuild service"
services= ["gw_rebuild" , "echo","virustotal"]
verify_server_cert=false

[gw_rebuild]
vendor = "glasswall"
req_mode=true # enable support for ICAP request mode
resp_mode=true # enable support for ICAP response mode
base_url = "$_CLOUDAPI_URL" #
scan_endpoint = "/api/rebuild/file"
api_key = "<api key>"
timeout  = 300 #seconds , ICAP will return 408 - Request timeout
fail_threshold = 2
policy= ""

[virustotal]
vendor = "virustotal"
req_mode=true # enable support for ICAP request mode
resp_mode=true # enable support for ICAP response mode
base_url = "https://www.virustotal.com/api/v3" #
scan_endpoint = "/files"
api_key = "<api key>"
timeout  = 300 #seconds , ICAP will return 408 - Request timeout
fail_threshold = 2
policy= ""
file_scan_endpoint = "/files"
url_scan_endpoint = "/url/scan"
file_report_endpoint = "/file/report?apikey=%s&resource=%s"
url_report_endpoint = "/url/report?apikey=%s&resource=%s"
file_analysis_endpoint="/analyses/"
status_check_interval = 10 #seconds, the time interval after which the submission status check will be called
status_check_timeout = 300 #seconds, the total time duration after which the the status check should be stopped, if not finished
bad_file_status = ["malicious"]
ok_file_status = ["ok"]


[echo]
req_mode=true
resp_mode=true
base_url = "echo" #
scan_endpoint = "echo"
api_key = "<api key>"
timeout  = 300 #seconds , ICAP will return 408 - Request timeout
fail_threshold = 2

#ICAP possible codes: 204 (No modifications needed) , 400 (Bad Request) , 403 (Forbidden) , 500 (Server Error) , 502 (Bad Gateway)
api_response_400 = 400 #Bad Request
api_response_403 = 403 #Forbidden
api_response_415 = 204 #Unsupported Media Type
api_response_422 = 204 #Unprocessable Entity
